from aiogram import types
from aiogram.dispatcher import FSMContext

from keyboards.default.buttons import tel, xiaomi, Redmi, menuAll
from keyboards.default.forcart import add_product, count1
from keyboards.default.model_redmi import redminot, modelListX, redmi_a, redmi_k, MI, POCO, mi_mi10, sheets_1, \
    black_shark, mi_mi11, mi_mi12, poco_x, poco_c, poco_m, poco_f, MI_MIX, mi_mix
from keyboards.inline.inn import donate_version
from loader import dp, db, bot
from states.state import Phone, Question


@dp.message_handler(text="–¢–µ–ª–µ—Ñ–æ–Ω—ãüì±")
async def all_brand(message: types.Message):
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –ú–∞—Ä–∫—É –°–º–∞—Ä—Ç—Ñ–æ–Ω–æ–≤", reply_markup=tel)
    await Phone.category.set()


@dp.message_handler(text="–ù–æ—É—Ç–±—É–∫–∏üíª (beta)")
async def all_brand(message: types.Message):
    await message.answer("–≠—Ç–æ—Ç —Ä–∞–∑–¥–µ–ª –µ—â–µ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ!")


@dp.message_handler(text="–°–≤—è–∑–∞—Ç—å—Å—è —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º‚ÅâÔ∏è")
async def all_brand(message: types.Message, state: FSMContext):
    await message.answer("–ó–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å!")
    await Question.questionad.set()

@dp.message_handler(state=Question.questionad)
async def get_price(message: types.Message, state: FSMContext):
    que = message.text
    await state.update_data(
        {"vopros": que}
    )
    data = await state.get_data()
    vopros = data.get("vopros")
    username = message.from_user.username
    iduser = message.from_user.id
    await bot.send_message(chat_id=1297546327,text=f"–í–æ–ø—Ä–æ—Å: {vopros}\n–ù–∏–∫–Ω–µ–π–º: @{username}\nID –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {iduser}")
    await message.answer("–í–∞—à –≤–æ–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!\n"
                         "–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–º–æ—â—å –ø–æ —É–ª—É—á—à–µ–Ω–∏—é –Ω–∞—à–µ–≥–æ –±–æ—Ç–∞!",reply_markup=menuAll)
    await state.finish()
@dp.message_handler(text="–ù–∞–∑–∞–¥üîô", state=Phone.category)
async def back(message: types.Message, state: FSMContext):
    await message.answer("–í—ã –Ω–∞–∂–∞–ª–∏ –Ω–∞–∑–∞–¥", reply_markup=menuAll)
    await state.finish()


@dp.message_handler(text='Xiaomi', state=Phone.category)
async def Xiaomi_menu(message: types.Message):
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –ª–∏–Ω–µ–π–∫—É —Å–º–∞—Ä—Ç—Ñ–æ–Ω–æ–≤ Xiaomi", reply_markup=xiaomi)
    await Phone.subcategory.set()


@dp.message_handler(text="–ù–∞–∑–∞–¥üîô", state=Phone.subcategory)
async def back(message: types.Message):
    await message.answer("–í—ã –Ω–∞–∂–∞–ª–∏ –Ω–∞–∑–∞–¥", reply_markup=tel)
    await Phone.category.set()


@dp.message_handler(text='Redmi', state=Phone.subcategory)
async def Redmi_menu(message: types.Message):
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Å–µ—Ä–∏—é —Å–º–∞—Ä—Ç—Ñ–æ–Ω–∞ Redmi", reply_markup=Redmi)
    await Phone.productR.set()


@dp.message_handler(text="–ù–∞–∑–∞–¥üîô", state=Phone.productR)
async def back(message: types.Message):
    await message.answer("–í—ã –Ω–∞–∂–∞–ª–∏ –Ω–∞–∑–∞–¥", reply_markup=xiaomi)
    await Phone.subcategory.set()


@dp.message_handler(text='MI MIX', state=Phone.subcategory)
async def MI_menu(message: types.Message):
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Å–µ—Ä–∏—é —Å–º–∞—Ä—Ç—Ñ–æ–Ω–∞ MI MIX", reply_markup=MI_MIX)
    await Phone.productMIX.set()


@dp.message_handler(text='MIX', state=Phone.productMIX)
async def MI_menu(message: types.Message):
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Å–µ—Ä–∏—é —Å–º–∞—Ä—Ç—Ñ–æ–Ω–∞ MIX", reply_markup=mi_mix)
    await Phone.subproductMIX.set()


@dp.message_handler(text='MI', state=Phone.subcategory)
async def MI_menu(message: types.Message):
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Å–µ—Ä–∏—é —Å–º–∞—Ä—Ç—Ñ–æ–Ω–∞ MI", reply_markup=MI)
    await Phone.productMI.set()


@dp.message_handler(text="–ù–∞–∑–∞–¥üîô", state=Phone.subproductMIX)
async def back(message: types.Message):
    await message.answer("–í—ã –Ω–∞–∂–∞–ª–∏ –Ω–∞–∑–∞–¥", reply_markup=MI_MIX)
    await Phone.productMIX.set()


@dp.message_handler(text="–ù–∞–∑–∞–¥üîô", state=Phone.productMIX)
async def back(message: types.Message):
    await message.answer("–í—ã –Ω–∞–∂–∞–ª–∏ –Ω–∞–∑–∞–¥", reply_markup=xiaomi)
    await Phone.subcategory.set()


@dp.message_handler(text="MI 10/T", state=Phone.productMI)
async def MI10_menu(message: types.Message):
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å —Å–º–∞—Ä—Ç—Ñ–æ–Ω–∞ MI 10/T", reply_markup=mi_mi10)
    await Phone.subproductMI.set()


@dp.message_handler(text="MI 11/T", state=Phone.productMI)
async def MI10_menu(message: types.Message):
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å —Å–º–∞—Ä—Ç—Ñ–æ–Ω–∞ MI 11/T", reply_markup=mi_mi11)
    await Phone.subproductMI.set()


@dp.message_handler(text="MI 12/T", state=Phone.productMI)
async def MI10_menu(message: types.Message):
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å —Å–º–∞—Ä—Ç—Ñ–æ–Ω–∞ MI 12/T", reply_markup=mi_mi12)
    await Phone.subproductMI.set()


@dp.message_handler(text="Black Shark", state=Phone.productMI)
async def MI10_menu(message: types.Message):
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å —Å–º–∞—Ä—Ç—Ñ–æ–Ω–∞ Black Shark", reply_markup=black_shark)
    await Phone.subproductMI.set()


@dp.message_handler(text="–ù–∞–∑–∞–¥üîô", state=Phone.subproductMI)
async def back(message: types.Message):
    await message.answer("–í—ã –Ω–∞–∂–∞–ª–∏ –Ω–∞–∑–∞–¥", reply_markup=MI)
    await Phone.productMI.set()


@dp.message_handler(text="–ù–∞–∑–∞–¥üîô", state=Phone.productMI)
async def back(message: types.Message):
    await message.answer("–í—ã –Ω–∞–∂–∞–ª–∏ –Ω–∞–∑–∞–¥", reply_markup=xiaomi)
    await Phone.subcategory.set()


@dp.message_handler(text='POCO', state=Phone.subcategory)
async def POCO_menu(message: types.Message):
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Å–µ—Ä–∏—é —Å–º–∞—Ä—Ç—Ñ–æ–Ω–∞ POCO", reply_markup=POCO)
    await Phone.productP.set()


@dp.message_handler(text="POCO X", state=Phone.productP)
async def MI10_menu(message: types.Message):
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å —Å–º–∞—Ä—Ç—Ñ–æ–Ω–∞ POCO X", reply_markup=poco_x)
    await Phone.subproductP.set()


@dp.message_handler(text="POCO C", state=Phone.productP)
async def MI10_menu(message: types.Message):
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å —Å–º–∞—Ä—Ç—Ñ–æ–Ω–∞ POCO C", reply_markup=poco_c)
    await Phone.subproductP.set()


@dp.message_handler(text="POCO F", state=Phone.productP)
async def MI10_menu(message: types.Message):
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å —Å–º–∞—Ä—Ç—Ñ–æ–Ω–∞ POCO F", reply_markup=poco_f)
    await Phone.subproductP.set()


@dp.message_handler(text="POCO M", state=Phone.productP)
async def MI10_menu(message: types.Message):
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å —Å–º–∞—Ä—Ç—Ñ–æ–Ω–∞ POCO M", reply_markup=poco_m)
    await Phone.subproductP.set()


@dp.message_handler(text="–ù–∞–∑–∞–¥üîô", state=Phone.subproductP)
async def back(message: types.Message):
    await message.answer("–í—ã –Ω–∞–∂–∞–ª–∏ –Ω–∞–∑–∞–¥", reply_markup=POCO)
    await Phone.productP.set()


@dp.message_handler(text="–ù–∞–∑–∞–¥üîô", state=Phone.productP)
async def back(message: types.Message):
    await message.answer("–í—ã –Ω–∞–∂–∞–ª–∏ –Ω–∞–∑–∞–¥", reply_markup=xiaomi)
    await Phone.subcategory.set()


@dp.message_handler(text="–ù–∞–∑–∞–¥üîô", state=Phone.subproductR)
async def back(message: types.Message):
    await message.answer("–í—ã –Ω–∞–∂–∞–ª–∏ –Ω–∞–∑–∞–¥", reply_markup=Redmi)
    await Phone.productR.set()


@dp.message_handler(text="Redmi/Redmi A", state=Phone.productR)
async def Redmi_A_menu(message: types.Message):
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å —Å–º–∞—Ä—Ç—Ñ–æ–Ω–∞ Redmi/Redmi A", reply_markup=redmi_a)
    await Phone.subproductR.set()


@dp.message_handler(text="Redmi K", state=Phone.productR)
async def Redmi_K_menu(message: types.Message):
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å —Å–º–∞—Ä—Ç—Ñ–æ–Ω–∞ Redmi K", reply_markup=redmi_k)
    await Phone.subproductR.set()


@dp.message_handler(text="Redmi Note", state=Phone.productR)
async def Redmi_K_menu(message: types.Message):
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å —Å–º–∞—Ä—Ç—Ñ–æ–Ω–∞ Redmi Note", reply_markup=redminot)
    await Phone.subproductR.set()


@dp.message_handler(text='–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—éüè†', state=Phone)
async def main_menu(message: types.Message, state: FSMContext):
    await message.answer("–í—ã –Ω–∞–∂–∞–ª–∏ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=menuAll)
    await state.finish()


@dp.message_handler(text=modelListX, state=Phone.subproductR)
async def model_answer(message: types.Message, state: FSMContext):
    await message.answer(message.text)
    namex = message.text
    await state.update_data(
        {"name": namex}
    )
    for i in modelListX:
        if message.text == i:
            n = modelListX.index(i)
            n += 1
            answer_sheet = (sheets_1[f"B{n}:AV{n}"])
            for photo, date, size, weight, frame, color, battery, price, tech, touch, colour, sized, square, hw, sc, \
                sr, PPI, sp, other, camback, backab, backf, backrec, frontcam, frontab, frontf, frontrec, OS, chip, \
                cpu, gpu, sdcard, RAM, Antutu9, Antutu8, Geek5s, Geek5m, sim, net, speed, gprs, edge, wifi, gps, nfc, \
                usb, bluet in answer_sheet:
                await message.answer_photo(photo=photo.value)
                await message.answer(f'<b>‚Ä¢–û–±—â–∏–µ –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏</b>‚Ä¢\n\n'
                                     f'‚Ä¢–î–∞—Ç–∞ –≤—ã—Ö–æ–¥–∞: {date.value}\n'
                                     f'‚Ä¢–†–∞–∑–º–µ—Ä—ã (–íx–®x–ì): {size.value}\n'
                                     f'‚Ä¢–í–µ—Å: {weight.value}\n'
                                     f'‚Ä¢–ö–æ—Ä–ø—É—Å: {frame.value}\n'
                                     f'‚Ä¢–¶–≤–µ—Ç–∞: {color.value}\n'
                                     f'‚Ä¢–ê–∫–∫—É–º—É–ª—è—Ç–æ—Ä: {battery.value}\n'
                                     f'‚Ä¢–û—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–æ—á–Ω–∞—è —Ü–µ–Ω–∞: {price.value}\n'
                                     f'\n\n<b>‚Ä¢–î–∏—Å–ø–ª–µ–π‚Ä¢</b>\n\n'
                                     f'‚Ä¢–¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏: {tech.value}\n'
                                     f'‚Ä¢–°–µ–Ω—Å–æ—Ä–Ω—ã–π —ç–∫—Ä–∞–Ω: {touch.value}\n'
                                     f'‚Ä¢–ì–ª—É–±–∏–Ω–∞ —Ü–≤–µ—Ç–∞: {colour.value}\n'
                                     f'‚Ä¢–†–∞–∑–º–µ—Ä(–î–∏–∞–≥–æ–Ω–∞–ª—å): {sized.value}\n'
                                     f'‚Ä¢–ü–ª–æ—â–∞–¥—å —ç–∫—Ä–∞–Ω–∞: {square.value}\n'
                                     f'‚Ä¢–°–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ (–≤—ã—Å–æ—Ç–∞:—à–∏—Ä–∏–Ω–∞): {hw.value}\n'
                                     f'‚Ä¢–°–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ (—ç–∫—Ä–∞–Ω:–∫–æ—Ä–ø—É—Å): {sc.value}\n'
                                     f'‚Ä¢–†–∞–∑—Ä–µ—à–µ–Ω–∏–µ: {sr.value}\n'
                                     f'‚Ä¢–¢–æ—á–µ–∫ –Ω–∞ –¥—é–π–º : {PPI.value}\n'
                                     f'‚Ä¢–ó–∞—â–∏—Ç–∞ —ç–∫—Ä–∞–Ω–∞: {sp.value}\n'
                                     f'‚Ä¢–î—Ä—É–≥–æ–µ: {other.value}\n'
                                     f'\n\n<b>‚Ä¢–ö–∞–º–µ—Ä—ã –∏ –≤–∏–¥–µ–æ‚Ä¢</b>\n\n'
                                     f'‚Ä¢–ö–∞–º–µ—Ä–∞ –∑–∞–¥–Ω–µ–≥–æ, –æ—Å–Ω–æ–≤–Ω–∞—è: {camback.value}\n'
                                     f'‚Ä¢–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –∫–∞–º–µ—Ä—ã: \n{backab.value}\n'
                                     f'‚Ä¢–§—É–Ω–∫—Ü–∏–∏: {backf.value}\n'
                                     f'‚Ä¢–ó–∞–ø–∏—Å—å –≤–∏–¥–µ–æ: {backrec.value}\n'
                                     f'‚Ä¢–§—Ä–æ–Ω—Ç–∞–ª—å–Ω–∞—è –∫–∞–º–µ—Ä–∞, —Å–µ–ª—Ñ–∏: {frontcam.value}\n'
                                     f'‚Ä¢–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞: {frontab.value}\n'
                                     f'‚Ä¢–§—É–Ω–∫—Ü–∏–∏: {frontf.value}\n'
                                     f'‚Ä¢–ó–∞–ø–∏—Å—å –≤–∏–¥–µ–æ: {frontrec.value}\n'
                                     f'\n\n<b>‚Ä¢–ü—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—å‚Ä¢</b>\n\n'
                                     f'‚Ä¢–û–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ (OS): {OS.value}\n'
                                     f'‚Ä¢–ß–∏–ø—Å–µ—Ç: {chip.value}\n'
                                     f'‚Ä¢–¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä (CPU): {cpu.value}\n'
                                     f'‚Ä¢–ì—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–π –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä (GPU): {gpu.value}\n'
                                     f'‚Ä¢–í–Ω–µ—à–Ω—è—è –∫–∞—Ä—Ç–∞ –ø–∞–º—è—Ç–∏: {sdcard.value}\n'
                                     f'‚Ä¢–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –ø–∞–º—è—Ç—å: {RAM.value}\n'
                                     f'‚Ä¢–†–µ–∑—É–ª—å—Ç–∞—Ç Antutu 9: {Antutu9.value}\n'
                                     f'‚Ä¢–†–µ–∑—É–ª—å—Ç–∞—Ç Antutu 8: {Antutu8.value}\n'
                                     f'‚Ä¢–†–µ–∑—É–ª—å—Ç–∞—Ç GeekBench 5 Single Core: {Geek5s.value}\n'
                                     f'‚Ä¢–†–µ–∑—É–ª—å—Ç–∞—Ç GeekBench 5 Multi-Core: {Geek5m.value}\n'
                                     f'\n\n<b>‚Ä¢–°–µ—Ç–∏‚Ä¢</b>\n\n'
                                     f'‚Ä¢–°–ª–æ—Ç—ã: {sim.value}\n'
                                     f'‚Ä¢–°–µ—Ç—å: {net.value}\n'
                                     f'‚Ä¢–°–∫–æ—Ä–æ—Å—Ç—å –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞: {speed.value}\n'
                                     f'‚Ä¢GPRS: {gprs.value}\n'
                                     f'‚Ä¢Edge: {edge.value}\n'
                                     f'‚Ä¢Wi-Fi: {wifi.value}\n'
                                     f'‚Ä¢GPS: {gps.value}\n'
                                     f'‚Ä¢NFC: {nfc.value}\n'
                                     f'‚Ä¢USB: {usb.value}\n'
                                     f'‚Ä¢Bluetooth: {bluet.value}\n', reply_markup=add_product)
                Price = price.value
                await state.update_data(
                    {"price": Price}
                )
                await Phone.subproductR.set()


@dp.message_handler(text="–î–æ–±–∞–≤–∏—Ç—å –≤ –∫–æ—Ä–∑–∏–Ω–∫—É!", state=Phone.subproductR)
async def addtocart(message: types.Message):
    await message.answer("–°–∫–æ–ª—å–∫–æ —Å–º–∞—Ä—Ç—Ñ–æ–Ω–æ–≤ —Ö–æ—Ç–∏—Ç–µ –∫—É–ø–∏—Ç—å?", reply_markup=count1)
    await Phone.subproductR.set()


@dp.message_handler(text="üîô–ù–∞–∑–∞–¥", state=Phone.subproductR)
async def addtocart(message: types.Message):
    await message.answer("–í—ã –Ω–∞–∂–∞–ª–∏ –Ω–∞–∑–∞–¥", reply_markup=Redmi)
    await Phone.productR.set()


@dp.message_handler(text="–û—Ç–º–µ–Ω–∞", state=Phone.subproductR)
async def get_donate(message: types.Message):
    await message.answer('–í—ã –Ω–∞–∂–∞–ª–∏ –æ—Ç–º–µ–Ω–∞', reply_markup=Redmi)
    await Phone.productR.set()


@dp.message_handler(state=Phone.subproductR)
async def add1(message: types.Message, state: FSMContext):
    n = message.text
    if is_number(n) == True:
        dataall = await state.get_data()
        NAME = dataall.get("name")
        price = dataall.get("price")
        idname = message.from_user.id
        product = db.check_product(tg_id=message.from_user.id, Name=NAME)
        if product:
            db.update_product(tg_id=idname, Name=NAME, quantity=int(product[2]) + int(n))
        else:
            db.add_product(tg_id=idname, Name=NAME, quantity=n)
        await message.answer("–í–∞—à –∑–∞–∫–∞–∑ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω–∫—É!\n"
                             f"–í–∞—à ID {idname}\n"
                             f"–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞ {NAME}\n"
                             f"–ö–æ–ª-–≤–æ: {n}, –¶–µ–Ω–∞ –∑–∞ —à—Ç—É–∫—É: {price}", reply_markup=Redmi)
    await Phone.productR.set()


@dp.message_handler(text=modelListX, state=Phone.subproductMI)
async def model_answer(message: types.Message, state: FSMContext):
    await message.answer(message.text)
    namex = message.text
    await state.update_data(
        {"name": namex}
    )
    for i in modelListX:
        if message.text == i:
            n = modelListX.index(i)
            n += 1
            answer_sheet = (sheets_1[f"B{n}:AV{n}"])
            for photo, date, size, weight, frame, color, battery, price, tech, touch, colour, sized, square, hw, sc, \
                sr, PPI, sp, other, camback, backab, backf, backrec, frontcam, frontab, frontf, frontrec, OS, chip, \
                cpu, gpu, sdcard, RAM, Antutu9, Antutu8, Geek5s, Geek5m, sim, net, speed, gprs, edge, wifi, gps, nfc, \
                usb, bluet in answer_sheet:
                await message.answer_photo(photo=photo.value)
                await message.answer(f'<b>‚Ä¢–û–±—â–∏–µ –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏</b>‚Ä¢\n\n'
                                     f'‚Ä¢–î–∞—Ç–∞ –≤—ã—Ö–æ–¥–∞: {date.value}\n'
                                     f'‚Ä¢–†–∞–∑–º–µ—Ä—ã (–íx–®x–ì): {size.value}\n'
                                     f'‚Ä¢–í–µ—Å: {weight.value}\n'
                                     f'‚Ä¢–ö–æ—Ä–ø—É—Å: {frame.value}\n'
                                     f'‚Ä¢–¶–≤–µ—Ç–∞: {color.value}\n'
                                     f'‚Ä¢–ê–∫–∫—É–º—É–ª—è—Ç–æ—Ä: {battery.value}\n'
                                     f'‚Ä¢–û—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–æ—á–Ω–∞—è —Ü–µ–Ω–∞: {price.value}\n'
                                     f'\n\n<b>‚Ä¢–î–∏—Å–ø–ª–µ–π‚Ä¢</b>\n\n'
                                     f'‚Ä¢–¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏: {tech.value}\n'
                                     f'‚Ä¢–°–µ–Ω—Å–æ—Ä–Ω—ã–π —ç–∫—Ä–∞–Ω: {touch.value}\n'
                                     f'‚Ä¢–ì–ª—É–±–∏–Ω–∞ —Ü–≤–µ—Ç–∞: {colour.value}\n'
                                     f'‚Ä¢–†–∞–∑–º–µ—Ä(–î–∏–∞–≥–æ–Ω–∞–ª—å): {sized.value}\n'
                                     f'‚Ä¢–ü–ª–æ—â–∞–¥—å —ç–∫—Ä–∞–Ω–∞: {square.value}\n'
                                     f'‚Ä¢–°–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ (–≤—ã—Å–æ—Ç–∞:—à–∏—Ä–∏–Ω–∞): {hw.value}\n'
                                     f'‚Ä¢–°–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ (—ç–∫—Ä–∞–Ω:–∫–æ—Ä–ø—É—Å): {sc.value}\n'
                                     f'‚Ä¢–†–∞–∑—Ä–µ—à–µ–Ω–∏–µ: {sr.value}\n'
                                     f'‚Ä¢–¢–æ—á–µ–∫ –Ω–∞ –¥—é–π–º : {PPI.value}\n'
                                     f'‚Ä¢–ó–∞—â–∏—Ç–∞ —ç–∫—Ä–∞–Ω–∞: {sp.value}\n'
                                     f'‚Ä¢–î—Ä—É–≥–æ–µ: {other.value}\n'
                                     f'\n\n<b>‚Ä¢–ö–∞–º–µ—Ä—ã –∏ –≤–∏–¥–µ–æ‚Ä¢</b>\n\n'
                                     f'‚Ä¢–ö–∞–º–µ—Ä–∞ –∑–∞–¥–Ω–µ–≥–æ, –æ—Å–Ω–æ–≤–Ω–∞—è: {camback.value}\n'
                                     f'‚Ä¢–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –∫–∞–º–µ—Ä—ã: \n{backab.value}\n'
                                     f'‚Ä¢–§—É–Ω–∫—Ü–∏–∏: {backf.value}\n'
                                     f'‚Ä¢–ó–∞–ø–∏—Å—å –≤–∏–¥–µ–æ: {backrec.value}\n'
                                     f'‚Ä¢–§—Ä–æ–Ω—Ç–∞–ª—å–Ω–∞—è –∫–∞–º–µ—Ä–∞, —Å–µ–ª—Ñ–∏: {frontcam.value}\n'
                                     f'‚Ä¢–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞: {frontab.value}\n'
                                     f'‚Ä¢–§—É–Ω–∫—Ü–∏–∏: {frontf.value}\n'
                                     f'‚Ä¢–ó–∞–ø–∏—Å—å –≤–∏–¥–µ–æ: {frontrec.value}\n'
                                     f'\n\n<b>‚Ä¢–ü—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—å‚Ä¢</b>\n\n'
                                     f'‚Ä¢–û–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ (OS): {OS.value}\n'
                                     f'‚Ä¢–ß–∏–ø—Å–µ—Ç: {chip.value}\n'
                                     f'‚Ä¢–¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä (CPU): {cpu.value}\n'
                                     f'‚Ä¢–ì—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–π –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä (GPU): {gpu.value}\n'
                                     f'‚Ä¢–í–Ω–µ—à–Ω—è—è –∫–∞—Ä—Ç–∞ –ø–∞–º—è—Ç–∏: {sdcard.value}\n'
                                     f'‚Ä¢–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –ø–∞–º—è—Ç—å: {RAM.value}\n'
                                     f'‚Ä¢–†–µ–∑—É–ª—å—Ç–∞—Ç Antutu 9: {Antutu9.value}\n'
                                     f'‚Ä¢–†–µ–∑—É–ª—å—Ç–∞—Ç Antutu 8: {Antutu8.value}\n'
                                     f'‚Ä¢–†–µ–∑—É–ª—å—Ç–∞—Ç GeekBench 5 Single Core: {Geek5s.value}\n'
                                     f'‚Ä¢–†–µ–∑—É–ª—å—Ç–∞—Ç GeekBench 5 Multi-Core: {Geek5m.value}\n'
                                     f'\n\n<b>‚Ä¢ –°–µ—Ç–∏ ‚Ä¢</b>\n\n'
                                     f'‚Ä¢–°–ª–æ—Ç—ã: {sim.value}\n'
                                     f'‚Ä¢–°–µ—Ç—å: {net.value}\n'
                                     f'‚Ä¢–°–∫–æ—Ä–æ—Å—Ç—å –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞: {speed.value}\n'
                                     f'‚Ä¢GPRS: {gprs.value}\n'
                                     f'‚Ä¢Edge: {edge.value}\n'
                                     f'‚Ä¢Wi-Fi: {wifi.value}\n'
                                     f'‚Ä¢GPS: {gps.value}\n'
                                     f'‚Ä¢NFC: {nfc.value}\n'
                                     f'‚Ä¢USB: {usb.value}\n'
                                     f'‚Ä¢Bluetooth: {bluet.value}\n', reply_markup=add_product)
                Price = price.value
                await state.update_data(
                    {"price": Price}
                )
                await Phone.subproductMI.set()


@dp.message_handler(text="–î–æ–±–∞–≤–∏—Ç—å –≤ –∫–æ—Ä–∑–∏–Ω–∫—É!", state=Phone.subproductMI)
async def addtocart(message: types.Message):
    await message.answer("–°–∫–æ–ª—å–∫–æ —Å–º–∞—Ä—Ç—Ñ–æ–Ω–æ–≤ —Ö–æ—Ç–∏—Ç–µ –∫—É–ø–∏—Ç—å?", reply_markup=count1)
    await Phone.subproductMI.set()


@dp.message_handler(text="üîô–ù–∞–∑–∞–¥", state=Phone.subproductMI)
async def addtocart(message: types.Message):
    await message.answer("–í—ã –Ω–∞–∂–∞–ª–∏ –Ω–∞–∑–∞–¥", reply_markup=MI)
    await Phone.productMI.set()


@dp.message_handler(text="–û—Ç–º–µ–Ω–∞", state=Phone.subproductMI)
async def get_donate(message: types.Message):
    await message.answer('–í—ã –Ω–∞–∂–∞–ª–∏ –æ—Ç–º–µ–Ω–∞', reply_markup=MI)
    await Phone.productMI.set()


def is_number(s):
    try:
        float(s)
        return True
    except ValueError:
        return False


@dp.message_handler(state=Phone.subproductMI)
async def add1(message: types.Message, state: FSMContext):
    n = message.text
    if is_number(n) == True:
        dataall = await state.get_data()
        NAME = dataall.get("name")
        price = dataall.get("price")
        idname = message.from_user.id
        product = db.check_product(tg_id=message.from_user.id, Name=NAME)
        if product:
            db.update_product(tg_id=idname, Name=NAME, quantity=int(product[2]) + int(n))
        else:
            db.add_product(tg_id=idname, Name=NAME, quantity=n)
        await message.answer("–í–∞—à –∑–∞–∫–∞–∑ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω–∫—É!\n"
                             f"–í–∞—à ID {idname}\n"
                             f"–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞ {NAME}\n"
                             f"–ö–æ–ª-–≤–æ: {n}, –¶–µ–Ω–∞ –∑–∞ —à—Ç—É–∫—É: {price}", reply_markup=MI)
    await Phone.productMI.set()


@dp.message_handler(text=modelListX, state=Phone.subproductMIX)
async def model_answer(message: types.Message, state: FSMContext):
    await message.answer(message.text)
    namex = message.text
    await state.update_data(
        {"name": namex}
    )
    for i in modelListX:
        if message.text == i:
            n = modelListX.index(i)
            n += 1
            answer_sheet = (sheets_1[f"B{n}:AV{n}"])
            for photo, date, size, weight, frame, color, battery, price, tech, touch, colour, sized, square, hw, sc, \
                sr, PPI, sp, other, camback, backab, backf, backrec, frontcam, frontab, frontf, frontrec, OS, chip, \
                cpu, gpu, sdcard, RAM, Antutu9, Antutu8, Geek5s, Geek5m, sim, net, speed, gprs, edge, wifi, gps, nfc, \
                usb, bluet in answer_sheet:
                await message.answer_photo(photo=photo.value)
                await message.answer(f'<b>‚Ä¢–û–±—â–∏–µ –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏</b>‚Ä¢\n\n'
                                     f'‚Ä¢–î–∞—Ç–∞ –≤—ã—Ö–æ–¥–∞: {date.value}\n'
                                     f'‚Ä¢–†–∞–∑–º–µ—Ä—ã (–íx–®x–ì): {size.value}\n'
                                     f'‚Ä¢–í–µ—Å: {weight.value}\n'
                                     f'‚Ä¢–ö–æ—Ä–ø—É—Å: {frame.value}\n'
                                     f'‚Ä¢–¶–≤–µ—Ç–∞: {color.value}\n'
                                     f'‚Ä¢–ê–∫–∫—É–º—É–ª—è—Ç–æ—Ä: {battery.value}\n'
                                     f'‚Ä¢–û—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–æ—á–Ω–∞—è —Ü–µ–Ω–∞: {price.value}\n'
                                     f'\n\n<b>‚Ä¢–î–∏—Å–ø–ª–µ–π‚Ä¢</b>\n\n'
                                     f'‚Ä¢–¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏: {tech.value}\n'
                                     f'‚Ä¢–°–µ–Ω—Å–æ—Ä–Ω—ã–π —ç–∫—Ä–∞–Ω: {touch.value}\n'
                                     f'‚Ä¢–ì–ª—É–±–∏–Ω–∞ —Ü–≤–µ—Ç–∞: {colour.value}\n'
                                     f'‚Ä¢–†–∞–∑–º–µ—Ä(–î–∏–∞–≥–æ–Ω–∞–ª—å): {sized.value}\n'
                                     f'‚Ä¢–ü–ª–æ—â–∞–¥—å —ç–∫—Ä–∞–Ω–∞: {square.value}\n'
                                     f'‚Ä¢–°–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ (–≤—ã—Å–æ—Ç–∞:—à–∏—Ä–∏–Ω–∞): {hw.value}\n'
                                     f'‚Ä¢–°–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ (—ç–∫—Ä–∞–Ω:–∫–æ—Ä–ø—É—Å): {sc.value}\n'
                                     f'‚Ä¢–†–∞–∑—Ä–µ—à–µ–Ω–∏–µ: {sr.value}\n'
                                     f'‚Ä¢–¢–æ—á–µ–∫ –Ω–∞ –¥—é–π–º : {PPI.value}\n'
                                     f'‚Ä¢–ó–∞—â–∏—Ç–∞ —ç–∫—Ä–∞–Ω–∞: {sp.value}\n'
                                     f'‚Ä¢–î—Ä—É–≥–æ–µ: {other.value}\n'
                                     f'\n\n<b>‚Ä¢–ö–∞–º–µ—Ä—ã –∏ –≤–∏–¥–µ–æ‚Ä¢</b>\n\n'
                                     f'‚Ä¢–ö–∞–º–µ—Ä–∞ –∑–∞–¥–Ω–µ–≥–æ, –æ—Å–Ω–æ–≤–Ω–∞—è: {camback.value}\n'
                                     f'‚Ä¢–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –∫–∞–º–µ—Ä—ã: \n{backab.value}\n'
                                     f'‚Ä¢–§—É–Ω–∫—Ü–∏–∏: {backf.value}\n'
                                     f'‚Ä¢–ó–∞–ø–∏—Å—å –≤–∏–¥–µ–æ: {backrec.value}\n'
                                     f'‚Ä¢–§—Ä–æ–Ω—Ç–∞–ª—å–Ω–∞—è –∫–∞–º–µ—Ä–∞, —Å–µ–ª—Ñ–∏: {frontcam.value}\n'
                                     f'‚Ä¢–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞: {frontab.value}\n'
                                     f'‚Ä¢–§—É–Ω–∫—Ü–∏–∏: {frontf.value}\n'
                                     f'‚Ä¢–ó–∞–ø–∏—Å—å –≤–∏–¥–µ–æ: {frontrec.value}\n'
                                     f'\n\n<b>‚Ä¢–ü—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—å‚Ä¢</b>\n\n'
                                     f'‚Ä¢–û–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ (OS): {OS.value}\n'
                                     f'‚Ä¢–ß–∏–ø—Å–µ—Ç: {chip.value}\n'
                                     f'‚Ä¢–¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä (CPU): {cpu.value}\n'
                                     f'‚Ä¢–ì—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–π –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä (GPU): {gpu.value}\n'
                                     f'‚Ä¢–í–Ω–µ—à–Ω—è—è –∫–∞—Ä—Ç–∞ –ø–∞–º—è—Ç–∏: {sdcard.value}\n'
                                     f'‚Ä¢–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –ø–∞–º—è—Ç—å: {RAM.value}\n'
                                     f'‚Ä¢–†–µ–∑—É–ª—å—Ç–∞—Ç Antutu 9: {Antutu9.value}\n'
                                     f'‚Ä¢–†–µ–∑—É–ª—å—Ç–∞—Ç Antutu 8: {Antutu8.value}\n'
                                     f'‚Ä¢–†–µ–∑—É–ª—å—Ç–∞—Ç GeekBench 5 Single Core: {Geek5s.value}\n'
                                     f'‚Ä¢–†–µ–∑—É–ª—å—Ç–∞—Ç GeekBench 5 Multi-Core: {Geek5m.value}\n'
                                     f'\n\n<b>‚Ä¢–°–µ—Ç–∏‚Ä¢</b>\n\n'
                                     f'‚Ä¢–°–ª–æ—Ç—ã: {sim.value}\n'
                                     f'‚Ä¢–°–µ—Ç—å: {net.value}\n'
                                     f'‚Ä¢–°–∫–æ—Ä–æ—Å—Ç—å –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞: {speed.value}\n'
                                     f'‚Ä¢GPRS: {gprs.value}\n'
                                     f'‚Ä¢Edge: {edge.value}\n'
                                     f'‚Ä¢Wi-Fi: {wifi.value}\n'
                                     f'‚Ä¢GPS: {gps.value}\n'
                                     f'‚Ä¢NFC: {nfc.value}\n'
                                     f'‚Ä¢USB: {usb.value}\n'
                                     f'‚Ä¢Bluetooth: {bluet.value}\n', reply_markup=add_product)
                Price = price.value
                await state.update_data(
                    {"price": Price}
                )
                await Phone.subproductMIX.set()


@dp.message_handler(text="–î–æ–±–∞–≤–∏—Ç—å –≤ –∫–æ—Ä–∑–∏–Ω–∫—É!", state=Phone.subproductMIX)
async def addtocart(message: types.Message):
    await message.answer("–°–∫–æ–ª—å–∫–æ —Å–º–∞—Ä—Ç—Ñ–æ–Ω–æ–≤ —Ö–æ—Ç–∏—Ç–µ –∫—É–ø–∏—Ç—å?", reply_markup=count1)
    await Phone.subproductMIX.set()


@dp.message_handler(text="üîô–ù–∞–∑–∞–¥", state=Phone.subproductMIX)
async def addtocart(message: types.Message):
    await message.answer("–í—ã –Ω–∞–∂–∞–ª–∏ –Ω–∞–∑–∞–¥", reply_markup=MI_MIX)
    await Phone.productMIX.set()


@dp.message_handler(text="–û—Ç–º–µ–Ω–∞", state=Phone.subproductMIX)
async def get_donate(message: types.Message):
    await message.answer('–í—ã –Ω–∞–∂–∞–ª–∏ –æ—Ç–º–µ–Ω–∞', reply_markup=MI_MIX)
    await Phone.productMIX.set()


@dp.message_handler(state=Phone.subproductMIX)
async def add1(message: types.Message, state: FSMContext):
    n = message.text
    if is_number(n) == True:
        dataall = await state.get_data()
        NAME = dataall.get("name")
        price = dataall.get("price")
        idname = message.from_user.id
        product = db.check_product(tg_id=message.from_user.id, Name=NAME)
        if product:
            db.update_product(tg_id=idname, Name=NAME, quantity=int(product[2]) + int(n))
        else:
            db.add_product(tg_id=idname, Name=NAME, quantity=n)
        await message.answer("–í–∞—à –∑–∞–∫–∞–∑ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω–∫—É!\n"
                             f"–í–∞—à ID {idname}\n"
                             f"–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞ {NAME}\n"
                             f"–ö–æ–ª-–≤–æ: {n}, –¶–µ–Ω–∞ –∑–∞ —à—Ç—É–∫—É: {price}", reply_markup=MI_MIX)
    await Phone.productMIX.set()


@dp.message_handler(text=modelListX, state=Phone.subproductP)
async def model_answer(message: types.Message, state: FSMContext):
    namex = message.text
    await state.update_data(
        {"name": namex}
    )
    for i in modelListX:
        if message.text == i:
            n = modelListX.index(i)
            n += 1
            answer_sheet = (sheets_1[f"B{n}:AV{n}"])
            for photo, date, size, weight, frame, color, battery, price, tech, touch, colour, sized, square, hw, sc, \
                sr, PPI, sp, other, camback, backab, backf, backrec, frontcam, frontab, frontf, frontrec, OS, chip, \
                cpu, gpu, sdcard, RAM, Antutu9, Antutu8, Geek5s, Geek5m, sim, net, speed, gprs, edge, wifi, gps, nfc, \
                usb, bluet in answer_sheet:
                await message.answer_photo(photo=photo.value)
                await message.answer(f'<b>‚Ä¢–û–±—â–∏–µ –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏</b>‚Ä¢\n\n'
                                     f'‚Ä¢–î–∞—Ç–∞ –≤—ã—Ö–æ–¥–∞: {date.value}\n'
                                     f'‚Ä¢–†–∞–∑–º–µ—Ä—ã (–íx–®x–ì): {size.value}\n'
                                     f'‚Ä¢–í–µ—Å: {weight.value}\n'
                                     f'‚Ä¢–ö–æ—Ä–ø—É—Å: {frame.value}\n'
                                     f'‚Ä¢–¶–≤–µ—Ç–∞: {color.value}\n'
                                     f'‚Ä¢–ê–∫–∫—É–º—É–ª—è—Ç–æ—Ä: {battery.value}\n'
                                     f'‚Ä¢–û—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–æ—á–Ω–∞—è —Ü–µ–Ω–∞: {price.value}\n'
                                     f'\n\n<b>‚Ä¢–î–∏—Å–ø–ª–µ–π‚Ä¢</b>\n\n'
                                     f'‚Ä¢–¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏: {tech.value}\n'
                                     f'‚Ä¢–°–µ–Ω—Å–æ—Ä–Ω—ã–π —ç–∫—Ä–∞–Ω: {touch.value}\n'
                                     f'‚Ä¢–ì–ª—É–±–∏–Ω–∞ —Ü–≤–µ—Ç–∞: {colour.value}\n'
                                     f'‚Ä¢–†–∞–∑–º–µ—Ä(–î–∏–∞–≥–æ–Ω–∞–ª—å): {sized.value}\n'
                                     f'‚Ä¢–ü–ª–æ—â–∞–¥—å —ç–∫—Ä–∞–Ω–∞: {square.value}\n'
                                     f'‚Ä¢–°–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ (–≤—ã—Å–æ—Ç–∞:—à–∏—Ä–∏–Ω–∞): {hw.value}\n'
                                     f'‚Ä¢–°–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ (—ç–∫—Ä–∞–Ω:–∫–æ—Ä–ø—É—Å): {sc.value}\n'
                                     f'‚Ä¢–†–∞–∑—Ä–µ—à–µ–Ω–∏–µ: {sr.value}\n'
                                     f'‚Ä¢–¢–æ—á–µ–∫ –Ω–∞ –¥—é–π–º : {PPI.value}\n'
                                     f'‚Ä¢–ó–∞—â–∏—Ç–∞ —ç–∫—Ä–∞–Ω–∞: {sp.value}\n'
                                     f'‚Ä¢–î—Ä—É–≥–æ–µ: {other.value}\n'
                                     f'\n\n<b>‚Ä¢–ö–∞–º–µ—Ä—ã –∏ –≤–∏–¥–µ–æ‚Ä¢</b>\n\n'
                                     f'‚Ä¢–ö–∞–º–µ—Ä–∞ –∑–∞–¥–Ω–µ–≥–æ, –æ—Å–Ω–æ–≤–Ω–∞—è: {camback.value}\n'
                                     f'‚Ä¢–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –∫–∞–º–µ—Ä—ã: \n{backab.value}\n'
                                     f'‚Ä¢–§—É–Ω–∫—Ü–∏–∏: {backf.value}\n'
                                     f'‚Ä¢–ó–∞–ø–∏—Å—å –≤–∏–¥–µ–æ: {backrec.value}\n'
                                     f'‚Ä¢–§—Ä–æ–Ω—Ç–∞–ª—å–Ω–∞—è –∫–∞–º–µ—Ä–∞, —Å–µ–ª—Ñ–∏: {frontcam.value}\n'
                                     f'‚Ä¢–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞: {frontab.value}\n'
                                     f'‚Ä¢–§—É–Ω–∫—Ü–∏–∏: {frontf.value}\n'
                                     f'‚Ä¢–ó–∞–ø–∏—Å—å –≤–∏–¥–µ–æ: {frontrec.value}\n'
                                     f'\n\n<b>‚Ä¢–ü—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—å‚Ä¢</b>\n\n'
                                     f'‚Ä¢–û–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ (OS): {OS.value}\n'
                                     f'‚Ä¢–ß–∏–ø—Å–µ—Ç: {chip.value}\n'
                                     f'‚Ä¢–¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä (CPU): {cpu.value}\n'
                                     f'‚Ä¢–ì—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–π –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä (GPU): {gpu.value}\n'
                                     f'‚Ä¢–í–Ω–µ—à–Ω—è—è –∫–∞—Ä—Ç–∞ –ø–∞–º—è—Ç–∏: {sdcard.value}\n'
                                     f'‚Ä¢–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –ø–∞–º—è—Ç—å: {RAM.value}\n'
                                     f'‚Ä¢–†–µ–∑—É–ª—å—Ç–∞—Ç Antutu 9: {Antutu9.value}\n'
                                     f'‚Ä¢–†–µ–∑—É–ª—å—Ç–∞—Ç Antutu 8: {Antutu8.value}\n'
                                     f'‚Ä¢–†–µ–∑—É–ª—å—Ç–∞—Ç GeekBench 5 Single Core: {Geek5s.value}\n'
                                     f'‚Ä¢–†–µ–∑—É–ª—å—Ç–∞—Ç GeekBench 5 Multi-Core: {Geek5m.value}\n'
                                     f'\n\n<b>‚Ä¢–°–µ—Ç–∏‚Ä¢</b>\n\n'
                                     f'‚Ä¢–°–ª–æ—Ç—ã: {sim.value}\n'
                                     f'‚Ä¢–°–µ—Ç—å: {net.value}\n'
                                     f'‚Ä¢–°–∫–æ—Ä–æ—Å—Ç—å –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞: {speed.value}\n'
                                     f'‚Ä¢GPRS: {gprs.value}\n'
                                     f'‚Ä¢Edge: {edge.value}\n'
                                     f'‚Ä¢Wi-Fi: {wifi.value}\n'
                                     f'‚Ä¢GPS: {gps.value}\n'
                                     f'‚Ä¢NFC: {nfc.value}\n'
                                     f'‚Ä¢USB: {usb.value}\n'
                                     f'‚Ä¢Bluetooth: {bluet.value}\n', reply_markup=add_product)
                Price = price.value
                await state.update_data(
                    {"price": Price}
                )
                await Phone.subproductP.set()


@dp.message_handler(text="–î–æ–±–∞–≤–∏—Ç—å –≤ –∫–æ—Ä–∑–∏–Ω–∫—É!", state=Phone.subproductP)
async def addtocart(message: types.Message):
    await message.answer("–°–∫–æ–ª—å–∫–æ —Å–º–∞—Ä—Ç—Ñ–æ–Ω–æ–≤ —Ö–æ—Ç–∏—Ç–µ –∫—É–ø–∏—Ç—å?", reply_markup=count1)
    await Phone.subproductP.set()


@dp.message_handler(text="üîô–ù–∞–∑–∞–¥", state=Phone.subproductP)
async def addtocart(message: types.Message):
    await message.answer("–í—ã –Ω–∞–∂–∞–ª–∏ –Ω–∞–∑–∞–¥", reply_markup=POCO)
    await Phone.productP.set()


@dp.message_handler(text="–û—Ç–º–µ–Ω–∞", state=Phone.subproductP)
async def get_donate(message: types.Message):
    await message.answer('–í—ã –Ω–∞–∂–∞–ª–∏ –æ—Ç–º–µ–Ω–∞', reply_markup=POCO)
    await Phone.productP.set()


@dp.message_handler(state=Phone.subproductP)
async def add1(message: types.Message, state: FSMContext):
    n = message.text
    if is_number(n) == True:
        dataall = await state.get_data()
        NAME = dataall.get("name")
        price = dataall.get("price")
        idname = message.from_user.id
        product = db.check_product(tg_id=message.from_user.id, Name=NAME)
        if product:
            db.update_product(tg_id=idname, Name=NAME, quantity=int(product[2]) + int(n))
        else:
            db.add_product(tg_id=idname, Name=NAME, quantity=n)
        await message.answer("–í–∞—à –∑–∞–∫–∞–∑ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω–∫—É!\n"
                             f"–í–∞—à ID {idname}\n"
                             f"–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞ {NAME}\n"
                             f"–ö–æ–ª-–≤–æ: {n}, –¶–µ–Ω–∞ –∑–∞ —à—Ç—É–∫—É: {price}", reply_markup=POCO)
    await Phone.productP.set()


@dp.callback_query_handler(text="donate", state=Phone.subproductR)
async def get_donate(call: types.CallbackQuery):
    await call.message.answer('–í—ã–±–µ—Ä–∏—Ç–µ —É–¥–æ–±–Ω—ã–π —Å–ø–æ—Å–æ–± –ø–æ–¥–¥–µ—Ä–∂–∫–∏!', reply_markup=donate_version)
    await Phone.subproductR.set()


@dp.callback_query_handler(text="donate", state=Phone.subproductP)
async def get_donate(call: types.CallbackQuery):
    await call.message.answer('–í—ã–±–µ—Ä–∏—Ç–µ —É–¥–æ–±–Ω—ã–π —Å–ø–æ—Å–æ–± –ø–æ–¥–¥–µ—Ä–∂–∫–∏!', reply_markup=donate_version)
    await Phone.subproductP.set()


@dp.callback_query_handler(text="donate", state=Phone.subproductMI)
async def get_donate(call: types.CallbackQuery):
    await call.message.answer('–í—ã–±–µ—Ä–∏—Ç–µ —É–¥–æ–±–Ω—ã–π —Å–ø–æ—Å–æ–± –ø–æ–¥–¥–µ—Ä–∂–∫–∏!', reply_markup=donate_version)
    await Phone.subproductMI.set()


@dp.callback_query_handler(text="donate", state=Phone.subproductMIX)
async def get_donate(call: types.CallbackQuery):
    await call.message.answer('–í—ã–±–µ—Ä–∏—Ç–µ —É–¥–æ–±–Ω—ã–π —Å–ø–æ—Å–æ–± –ø–æ–¥–¥–µ—Ä–∂–∫–∏!', reply_markup=donate_version)
    await Phone.subproductMIX.set()
