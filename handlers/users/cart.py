import re

from aiogram import types
from aiogram.dispatcher import FSMContext
from aiogram.types import ReplyKeyboardMarkup, ReplyKeyboardRemove

from data.config import CHANNELS
from handlers.users.tel_price import get_price
from keyboards.default.buttons import menuAll, tel
from keyboards.inline.inn import user, contactnum, admin
from loader import dp, db
from states.state import Phone, Zakaz


@dp.message_handler(text='–ö–æ—Ä–∑–∏–Ω–∫–∞ üõí')
async def korzina(message: types.Message):
    products1 = db.get_products(tg_id=message.from_user.id)
    if len(products1) != 0:
        markup = ReplyKeyboardMarkup(resize_keyboard=True)
        markup.add("–ó–∞–∫–∞–∑–∞—Ç—å üöö")
        products = db.get_products(tg_id=message.from_user.id)
        total = 0
        msg = "–í–∞—à–∏ –∑–∞–∫–∞–∑—ã\n\n"
        for product in products:
            markup.add(f"‚ùå {product[1]} ‚ùå")
            price = get_price(product[1], product[2])
            total += price
            msg += f"{product[1]} x {product[2]} = {price} $\n"
        msg += f"\n–û–±—â–∞—è —Å—É–º–º–∞: {total} $"
        markup.row("–ù–∞–∑–∞–¥", "–û—á–∏—Å—Ç–∏—Ç—å üóë")
        await message.answer(msg, reply_markup=markup)
    else:
        await message.answer("–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∫–∞ –µ—â–µ –ø—É—Å—Ç–∞! –ú–æ–∂–µ—Ç –±—ã—Ç—å —ç—Ç–æ –∏—Å–ø—Ä–∞–≤–∏–º?", reply_markup=tel)
        await Phone.category.set()


@dp.message_handler(text_contains="‚ùå")
async def delete_product(message: types.Message):
    product = message.text
    product = product.replace("‚ùå", "")
    db.delete_product(tg_id=message.from_user.id, Name=product.strip())
    await message.answer(f"{product.strip()} –í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∫–∞ —É–¥–∞–ª–µ–Ω–∞!", reply_markup=menuAll)


@dp.message_handler(text="–û—á–∏—Å—Ç–∏—Ç—å üóë")
async def clearcart(message: types.Message):
    id = message.from_user.id
    db.clear_cart(tg_id=id)
    await message.answer("–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∫–∞ –æ—á–∏—â–µ–Ω–∞!", reply_markup=menuAll)


@dp.message_handler(text="–ù–∞–∑–∞–¥")
async def back(message: types.Message):
    await message.answer("–í—ã –Ω–∞–∂–∞–ª–∏ –Ω–∞–∑–∞–¥", reply_markup=menuAll)


@dp.message_handler(text="–ó–∞–∫–∞–∑–∞—Ç—å üöö")
async def send(message: types.Message):
    products = db.get_products(tg_id=message.from_user.id)
    total = 0
    msg = "–í–∞—à–∏ –∑–∞–∫–∞–∑—ã\n\n"
    for product in products:
        price = get_price(product[1], product[2])
        total += price
        msg += f"{product[1]} x {product[2]} = {price} $\n"
    msg += f"\n–û–±—â–∞—è —Å—É–º–º–∞: {total} $"
    yes_no = ReplyKeyboardMarkup(resize_keyboard=True)
    yes_no.add("–î–∞!")
    yes_no.add("–ù–µ—Ç!")
    await message.answer(msg)
    await message.answer("–í—Å–µ –≤–µ—Ä–Ω–æ?", reply_markup=yes_no)


@dp.message_handler(text="–î–∞!")
async def yes(message: types.Message):
    await message.answer("–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –Ω—É–∂–Ω—ã–µ –ø—É–Ω–∫—Ç—ã –ø–æ–∂–∞–ª—É–π—Å—Ç–∞", reply_markup=ReplyKeyboardRemove())
    await message.answer("–ö–∞–∫ –≤–∞—Å –∑–æ–≤—É—Ç?")
    await Zakaz.name.set()


@dp.message_handler(state=Zakaz.name)
async def name(message: types.Message, state: FSMContext):
    id1 = message.from_user.id
    await state.update_data(
        {"id":id1}
    )
    name = message.text
    await state.update_data(
        {"name": name}
    )
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏")
    await Zakaz.next()


@dp.message_handler(state=Zakaz.Adress)
async def adress(message: types.Message, state: FSMContext):
    adress1 = message.text
    await state.update_data(
        {"adress": adress1}
    )
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –æ—Å–Ω–æ–≤–Ω–æ–π –Ω–æ–º–µ—Ä!", reply_markup=contactnum)
    await Zakaz.next()


@dp.message_handler(content_types=['contact'], state=Zakaz.tel)
async def get_img(message: types.Message, state: FSMContext):
    phone = message.contact['phone_number']
    num = "^[\+]?[(]?[0-9]{3}[)]?[-\s\.]?[0-9]{3}[-\s\.]?[0-9]{4,6}$"
    if re.match(num, phone):
        await state.update_data(
            {'phone': phone}
        )
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤—Ç–æ—Ä–æ—Å—Ç–µ–ø–µ–Ω–Ω—ã–π –Ω–æ–º–µ—Ä!\n"
                             "(–µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –ª—é–±–æ–π –∑–Ω–∞–∫)")
        await Zakaz.next()
    else:
        await message.answer("–í—ã –≤–≤–µ–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä\n"
                             "–í–≤–µ–¥–∏—Ç–µ –µ—â–µ —Ä–∞–∑!")
        await Zakaz.tel


@dp.message_handler(state=Zakaz.tel2)
async def get_img(message: types.Message, state: FSMContext):
    tel2 = message.text
    await state.update_data(
        {'tel2': tel2}
    )
    data1 = await state.get_data()
    name = data1.get("name")
    adress1 = data1.get("adress")
    telnum1 = data1.get("phone")
    telnum2 = data1.get("tel2")
    Username = message.from_user.username
    await state.update_data(
        {"username": Username}
    )
    username = data1.get("username")
    await message.answer(
        text=f"–ò–º—è –∏ —Ñ–∞–º–∏–ª–∏—è: {name}\n"
             f"–ê–¥—Ä–µ—Å: {adress1}\n"
             f"–û—Å–Ω–æ–≤–Ω–æ–π –Ω–æ–º–µ—Ä: +{telnum1}\n"
             f"Username: @{Username}\n"
             f"–í—Ç–æ—Ä–æ—Å—Ç–µ–ø–µ–Ω–Ω—ã–π: +{telnum2}", reply_markup=user
    )
    await message.answer("–≠—Ç–æ—Ç —Ä–∞–∑–¥–µ–ª —Ç–æ–ª—å–∫–æ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–∞—à–∏—Ö —Å–∏–ªüòä", reply_markup=menuAll)
    await Zakaz.next()

@dp.callback_query_handler(text="cancel",state=Zakaz.confirmP)
async def back(call: types.CallbackQuery):
    await call.message.answer("–í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ –∑–∞–∫–∞–∑!", reply_markup=menuAll)
    await call.message.delete()


@dp.callback_query_handler(text="send_to_admin", state=Zakaz.confirmP)
async def sendadmin(call: types.CallbackQuery, state: FSMContext):
    data1 = await state.get_data()
    name = data1.get("name")
    adress1 = data1.get("adress")
    telnum1 = data1.get("phone")
    telnum2 = data1.get("tel2")
    id1 = data1.get("id")
    Username = call.message.from_user.username
    await state.update_data(
        {"username": Username}
    )
    username = data1.get("username")
    products = db.get_products(tg_id=id1)
    total = 0
    msg = "–ï–≥–æ –∑–∞–∫–∞–∑—ã\n\n"
    for product in products:
        price = get_price(product[1], product[2])
        total += price
        msg += f"{product[1]} x {product[2]} = {price} $\n"
    msg += f"\n–û–±—â–∞—è —Å—É–º–º–∞: {total} $\n"
    await call.bot.send_message(chat_id=1297546327,
                                text=f"{msg}\n"
                                     f"–ò–º—è –∏ —Ñ–∞–º–∏–ª–∏—è: {name}\n"
                                     f"–ê–¥—Ä–µ—Å: {adress1}\n"
                                     f"–û—Å–Ω–æ–≤–Ω–æ–π –Ω–æ–º–µ—Ä: +{telnum1}\n"
                                     f"Username: @{username}\n"
                                     f"–í—Ç–æ—Ä–æ—Å—Ç–µ–ø–µ–Ω–Ω—ã–π: +{telnum2}", reply_markup=admin
                                )
    await call.message.answer("–í–∞—à –∑–∞–∫–∞–∑ –Ω–µ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!\n"
                              "–≠—Ç–æ—Ç —Ä–∞–∑–¥–µ–ª —Ç–æ–ª—å–∫–æ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–∞—à–∏—Ö —Å–∏–ªüòä", reply_markup=menuAll)

    db.clear_cart(tg_id=id1)

    await state.finish()

@dp.callback_query_handler(text="send_to_channel")
async def confirm_post(call:types.CallbackQuery):
    message = await call.message.edit_reply_markup()
    await message.send_copy(chat_id=CHANNELS[0])

@dp.message_handler(text="–ù–µ—Ç!")
async def no(message: types.Message):
    await message.answer("–í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ –∑–∞–∫–∞–∑!", reply_markup=menuAll)
